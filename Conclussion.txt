Conclussions:
1.Merge Sort is the selected algorithm for sorting.
	-Has better average performance, despite the amount of data, whereas Quick Sort is faster on smaller data sets.
	-The worse case complexity(also applies for average and best cases) of Merge Sort is the best case for Quick Sort: O(nlogn).
	-Fits our approach best as we first build our dataset then sort it.
2.We use tuples to ease the process on ourselves, by having the algorithms sort based on the key, user id in our case, while ignoring the second element.

An alternative to this is the creation of an array as elements enter inside of it, by using Binary Search Trees.
With this approach the list created will always be in a sorted state, however different worse cases can appear as the binary tree
can be balanced(O(nlogn) not too different from Merge Sort) or unbalanced(O(n^2) which is worse than Merge Sort). The fix for unbalanced
trees will required more memory.

The choice on algorithm selection will be influenced by the type of data available, and data structures, and how much memory usage is available or allowed to be used,
as memory usage optimization could not be considered a priority depending on the task.

How to run the program:
1. Download all of the files in the same folder.
2. Run invitation.py from cmd.
3. Either enter a path to a file e.g.: "D:\Python\\Customer-Distance-Test\customers.txt" or press enter for the program to use the 
one in the folder.
4. See output in the command window.

Notes:
+different sorting algorithms
-test was more about code structure
-text comparison of all the timings(Timeit python benchmarking package)
-best if I did sorting on the fly for quick sort and merge sort
-python 3.7 installed and packages guide(example: numpy was missing as an installation instruction)
-move Conlussion to README.md
-include tests for code
-if you borrow implementations, why not just use the standard library?
-include the file for sort algorithm performance
-include library for sorting instead of borrowing?
-what do they care about in this test?
-do not make the assumption that the other person has as much knowledge as you
-input options?
-output files missing
-ValueObject pattern: https://martinfowler.com/bliki/ValueObject.html
-use constants
-consider making a command line interface
-consider python unittest